#!/usr/bin/env python3

import re
import sys
import json
import logging
import argparse
from typing import Union
from pathlib import Path
from collections import OrderedDict, defaultdict

from firma.util import AtomicOutputFile, init_logs
from caatdash.web import format_markdown_safe


LOG = logging.getLogger('po2json')

PO_DELIMITER = "\u0004"


# http://stackoverflow.com/a/24519338/201665
ESCAPE_SEQUENCE_RE = re.compile(r'''
    ( \\U........      # 8-digit hex escapes
    | \\u....          # 4-digit hex escapes
    | \\x..            # 2-digit hex escapes
    | \\[0-7]{1,3}     # Octal escapes
    | \\N\{[^}]+\}     # Unicode characters by name
    | \\[\\'"abfnrtv]  # Single-character escapes
    )''', re.UNICODE | re.VERBOSE)



FILTER_DIRECTORY = {
    "markdown": format_markdown_safe,
    "markdown_single": lambda x: format_markdown_safe(x, single=True),
}



def decode_escapes(s):
    def decode_match(match):
        return bytes(match.group(0), "utf-8").decode("unicode_escape")
    return ESCAPE_SEQUENCE_RE.sub(decode_match, s)



def iter_po_items(text):
    item = {}

    for line in text.splitlines():
        line = line.strip()
        if not line:
            continue

        if line.startswith("#"):
            continue

        if line.startswith('"'):
            assert item
            value = line

            assert value.startswith('"')
            assert value.endswith('"')
            value = decode_escapes(value[1:-1])

            assert "value" in item
            item["value"] += value
        else:
            if item:
                yield item
                item = {}

            assert " " in line

            (key, value) = line.split(" ", 1)

            assert key in ("msgctxt", "msgid", "msgstr")

            assert value.startswith('"')
            assert value.endswith('"')
            value = decode_escapes(value[1:-1])

            assert not item
            item = {
                "key": key,
                "value": value,
            }

    if item:
        yield item



def iter_po_messages(text):
    message = defaultdict()
    for item in iter_po_items(text):

        message[item["key"]] = item["value"]

        if item["key"] == "msgstr":
            assert message.get("msgid", None) is not None
            yield message
            message = defaultdict()

    assert not message



def parse_po(text, filter_dict=None):
    data = OrderedDict()

    lang = None

    for message in iter_po_messages(text):
        if message["msgid"] == "":
            head = OrderedDict()
            for line in message["msgstr"].splitlines():
                if line.startswith("#"):
                    continue
                (k, v) = [v.strip() for v in line.split(":", 1)]
                if not k or not v:
                    continue

                if k == "Language":
                    lang = v

                head[k] = v

            message["msgstr"] = head
        else:
            context = message.pop("msgctxt", None)
            if context is not None:
                message["msgid"] = context + PO_DELIMITER + message["msgid"]
                if context in filter_dict:
                    for f_name in filter_dict[context]:
                        message["msgstr"] = FILTER_DIRECTORY[f_name](message["msgstr"])
            message["msgstr"] = [
                message["msgstr"],
            ]

        if message["msgid"] in data:
            raise Exception(
                "`msgid`:`%s` with `msgstr`:`%s` is already present in domain.",
                message["msgid"],
                data[message["msgid"]]
            )

        data[message["msgid"]] = message["msgstr"]

    return data



def po2json(out, po_path_list, domain, filter_dict=None):
    data = {}

    for po_path in po_path_list:
        lang_data = parse_po(po_path.read_text(), filter_dict=filter_dict)

        lang = lang_data[""]["Language"]
        assert lang
        assert lang not in data
        data[lang] = {
            domain: lang_data
        }

        LOG.info(f"{lang}: {len(data)} rows")

    json.dump(data, out)



def main():
    LOG.addHandler(logging.StreamHandler())

    parser = argparse.ArgumentParser(description="Convert PO to JSON.")
    parser.add_argument(
        "--verbose", "-v",
        action="count", default=0,
        help="Print verbose information for debugging.")
    parser.add_argument(
        "--quiet", "-q",
        action="count", default=0,
        help="Suppress warnings.")

    parser.add_argument(
        "--filter", "-F",
        action="append",
        help="Filters to apply to a context, eg. `help=markdown` applies the `markdown` filter to all messages in the `help` context.")

    parser.add_argument(
        "domain",
        metavar="DOMAIN",
        help="Gettext domain.")

    parser.add_argument(
        "po_path_list",
        metavar="PO",
        nargs="+",
        type=Path,
        help="Path to input PO file.")

    parser.add_argument(
        "json_path",
        metavar="JSON",
        type=Path,
        help="Path to output JSON file.")

    args = parser.parse_args()
    init_logs(LOG, args=args)

    filter_dict = defaultdict(list)
    for filter_item in args.filter:
        key, value = filter_item.split("=", 1)
        assert value in FILTER_DIRECTORY
        if value not in filter_dict[key]:
            filter_dict[key].append(value)

    with AtomicOutputFile(args.json_path) as fp:
        po2json(fp, args.po_path_list, args.domain, filter_dict=filter_dict)



if __name__ == "__main__":
    main()
